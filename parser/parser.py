from lark import Lark, ast_utils
from lark.indenter import Indenter
import sys
import os
from typeChecking import checkType
from ASTtransformer import ASTtransformer
from NameAnalysisVisitor import NameAnalysisVisitor
import argparse


class TreeIndenter(Indenter):
    NL_type = '_NL'
    OPEN_PAREN_types = []
    CLOSE_PAREN_types = []
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


# cwd may differ depending on user Path or VSCode config, so I'm gonna set it permanently here :)
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

with open("./newGrammar.lark", "r") as file:
    grammar = file.read()
    file.close()

parser = Lark(grammar, start='program', parser='lalr', postlex=TreeIndenter())

transformer = ASTtransformer()


def run_checks(ast):
    return
    try:
        checkType(ast)
        NameAnalysisVisitor().visit(ast)
    except Exception as e:
        print("Type Check failed or Name Analysis failed: " + repr(e))


def parse_expression(expression):
    try:
        tree = parser.parse(expression)
        return tree
    except Exception as e:
        print(f"An error occurred: {e}")


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("source", help="path to the file containing your sourcecode")
    argparser.add_argument('-db', "--debug", action='store_true', help="if set, additional debug output will be generated")
    argparser.add_argument("-o", "--output", help="the file the astjson should be written to. if not present, stdout will be used")
    args = argparser.parse_args()
    
    with open(args.source, "r") as file:
        program = file.read()
        file.close()

    parsetree = parse_expression(program)

    # Generate AST
    transformer = ast_utils.create_transformer(sys.modules[__name__], ASTtransformer())
    ast = transformer.transform(parsetree)

    # Type Checking & Name Checking
    checkType(ast)

    run_checks(ast)
    if args.debug:
        print("#"*50)
        print("\nAST generated by Python:\n")
        print(ast)
        print("#"*50)

    #Output json
    if args.output:
        f = open(args.output, "w")
        f.write(ast.to_json())
        f.close()  # type: ignore
    else:
        print(ast.to_json())


if __name__ == "__main__":
    main()


